import xyz.wagyourtail.replace_str.ProcessClasses

import java.time.LocalDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id 'java'
    id 'signing'
    id 'maven-publish'
    id 'com.gradleup.nmcp' version '0.1.2'
    id 'com.diffplug.spotless' version '7.0.3'
}

version = "${build_version}" + (project.hasProperty("version_snapshot") ? "-SNAPSHOT" : "")
group = "${maven_group}"
description = 'A collection of API Utilities designed for multiple versions of Java'
base.archivesName = "${archives_base_name}"

JavaVersion targetVersion = JavaVersion.toVersion("${java_version}")
int targetVersionInt = Integer.parseInt(targetVersion.majorVersion)

[java].each {
    it.toolchain {
        languageVersion.set(JavaLanguageVersion.of(targetVersionInt))
    }
    it.withSourcesJar()
    it.withJavadocJar()
}

javadoc {
    failOnError = false
}

spotless {
    java {
        licenseHeaderFile(rootProject.file("HEADER"))
    }
}

configurations {
    shadeOnly
    shade
    implementation.extendsFrom shade
}

repositories {
    mavenCentral()

    // Lenni Reflect
    maven {
        url = "https://maven.lenni0451.net/releases/"
    }
    maven {
        url = "https://maven.lenni0451.net/snapshots"
    }
}

dependencies {
    // Annotations
    compileOnly("com.google.code.findbugs:jsr305:3.0.2")
    compileOnly("com.github.spotbugs:spotbugs-annotations:4.8.6")

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.13.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4j_version}"
    implementation group: 'net.lenni0451', name: 'Reflect', version: "${reflect_version}"
    implementation group: 'io.github.classgraph', name: 'classgraph', version: "${classgraph_version}"

    testImplementation "org.junit.jupiter:junit-jupiter:5.12.2"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testRuntimeOnly "org.slf4j:slf4j-simple:${slf4j_version}"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    maxParallelForks = Runtime.runtime.availableProcessors()
}

def projectName = project.name
def projectVersion = project.version
def projectDesc = project.description

[jar].each {
    it.manifest {
        attributes([
                "Specification-Title"     : projectName,
                "Specification-Vendor"    : "CDAGaming",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : projectName,
                "Implementation-Version"  : projectVersion,
                "Implementation-Vendor"   : "CDAGaming",
                "Implementation-Timestamp": LocalDateTime.now().atOffset(ZoneOffset.UTC)
                        .format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ"))
        ])
    }
}

gradle.projectsEvaluated {
    [javadoc].each {
        it.options.encoding = "UTF-8"
    }
}

[compileJava].each {
    it.options.encoding = 'UTF-8'
    it.options.deprecation = true
    it.options.fork = true

    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We"ll use that if it"s available, but otherwise we"ll use the older option.
    if (targetVersion.isJava9Compatible()) {
        it.options.release.set(targetVersionInt)
    }

    java.nio.file.Path path = it.destinationDirectory.asFile.getOrNull().toPath()
    it.doLast {
        ProcessClasses.process(
                path, [
                "APP_NAME"  : projectName,
                "VERSION_ID": projectVersion.toString()
        ]
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "${archives_base_name}"
                artifactId = "${archives_base_name}"
                packaging = 'jar'
                description = projectDesc
                url = 'https://github.com/CDAGaming/UniCore'

                scm {
                    connection = 'scm:git:git://github.com/CDAGaming/UniCore.git'
                    developerConnection = 'scm:git:ssh://github.com/CDAGaming/UniCore.git'
                    url = 'https://github.com/CDAGaming/UniCore'
                }
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/CDAGaming/UniCore/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'cdagaming'
                        name = 'CDAGaming'
                        email = 'cstack2011@yahoo.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = project.findProperty("mvn.user") ?: System.getenv("OSSRH_USERNAME")
                password = project.findProperty("mvn.key") ?: System.getenv("OSSRH_PASSWORD")
            }

            def releasesRepoUrl = ""
            def snapshotsRepoUrl = "https://central.sonatype.com/repository/maven-snapshots/"
            url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

nmcp {
    centralPortal {
        username = project.findProperty("mvn.user") ?: System.getenv("OSSRH_USERNAME")
        password = project.findProperty("mvn.key") ?: System.getenv("OSSRH_PASSWORD")
        publishingType = "USER_MANAGED"
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}
